// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @map("_id")
  username              String          @unique
  avatar                String?
  cover                 String?
  name                  String?
  surname               String?
  description           String?
  city                  String?
  school                String?
  work                  String?
  website               String?
  createdAt             DateTime        @default(now())
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  followers             Follower[]      @relation("UserFollowers")
  followings            Follower[]      @relation("UserFollowings")
  followRequestSent     FollowRequest[] @relation("followRequestSent")
  followRequestRecieved FollowRequest[] @relation("followRequestRecieved")
  BlockerSent           Block[]         @relation("BlockSent")
  BlockerRecieved       Block[]         @relation("BlockRecieved")
  stories               Story[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String //here the userId is not the type of object id , it is custom String (unique)
  img String?
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId //here the post ID will be object id
  user      User     @relation(fields: [userId], references: [id])
  userId    String //here the userId is not the type of object id , it is custom String (unique)
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId //here the post ID will be object id
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id])
  followingId String
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  Sender     User     @relation("followRequestSent", fields: [SenderId], references: [id])
  SenderId   String
  Reciever   User     @relation("followRequestRecieved", fields: [RecieverId], references: [id])
  RecieverId String

  @@unique([SenderId, RecieverId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  Blocker   User     @relation("BlockSent", fields: [BlockerId], references: [id])
  BlockerId String
  Blocked   User     @relation("BlockRecieved", fields: [BlockedId], references: [id])
  BlockedId String

  @@unique([BlockedId, BlockerId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  img       String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}
